
#include "encrypt_utils.h"

static uint8_t aes_key[AES_KEY_SIZE];
static uint8_t hmac_key[HMAC_KEY_SIZE];

// Function to derive both AES and HMAC keys from the shared secret
void deriveKeys() {
    const char* shared_secret = "my_shared_secret";  // You can change this

    mbedtls_md_context_t ctx;
    mbedtls_md_init(&ctx);

    // Derive AES key from shared secret
    mbedtls_md_setup(&ctx, mbedtls_md_info_from_type(MBEDTLS_MD_SHA256), 0);
    mbedtls_md_starts(&ctx);
    mbedtls_md_update(&ctx, (const uint8_t*)shared_secret, strlen(shared_secret));
    mbedtls_md_finish(&ctx, aes_key);
    mbedtls_md_free(&ctx);
    
    // Derive HMAC key from AES key
    mbedtls_md_setup(&ctx, mbedtls_md_info_from_type(MBEDTLS_MD_SHA256), 0);
    mbedtls_md_starts(&ctx);
    mbedtls_md_update(&ctx, aes_key, AES_KEY_SIZE);
    mbedtls_md_finish(&ctx, hmac_key);
    mbedtls_md_free(&ctx);
}

// AES Encryption
void aesEncrypt(const uint8_t* plaintext, uint8_t* ciphertext, uint8_t* iv, size_t length) {
    mbedtls_aes_context aes;
    mbedtls_aes_init(&aes);
    mbedtls_aes_setkey_enc(&aes, aes_key, 256);

    memcpy(iv, aes_key, IV_SIZE);  // Use AES key as IV
    mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_ENCRYPT, length, iv, plaintext, ciphertext);

    mbedtls_aes_free(&aes);
}

// AES Decryption
void aesDecrypt(const uint8_t* ciphertext, uint8_t* plaintext, uint8_t* iv, size_t length) {
    mbedtls_aes_context aes;
    mbedtls_aes_init(&aes);
    mbedtls_aes_setkey_dec(&aes, aes_key, 256);

    memcpy(iv, aes_key, IV_SIZE);  // Use AES key as IV
    mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_DECRYPT, length, iv, ciphertext, plaintext);

    mbedtls_aes_free(&aes);
}

// HMAC Generation
void generateHMAC(const uint8_t* data, size_t length, uint8_t* hmac_output) {
    mbedtls_md_context_t ctx;
    mbedtls_md_init(&ctx);
    mbedtls_md_setup(&ctx, mbedtls_md_info_from_type(MBEDTLS_MD_SHA256), 1);
    mbedtls_md_hmac_starts(&ctx, hmac_key, HMAC_KEY_SIZE);
    mbedtls_md_hmac_update(&ctx, data, length);
    mbedtls_md_hmac_finish(&ctx, hmac_output);
    mbedtls_md_free(&ctx);
}

// Base64 Encoding
String base64Encode(const uint8_t* data, size_t length) {
    size_t outLen;
    mbedtls_base64_encode(NULL, 0, &outLen, data, length);
    char* encoded = (char*)malloc(outLen);
    mbedtls_base64_encode((unsigned char*)encoded, outLen, &outLen, data, length);
    String result = String(encoded);
    free(encoded);
    return result;
}

// Base64 Decoding
int base64Decode(const String& encoded, uint8_t* decoded, size_t maxLength) {
    size_t outLen;
    return mbedtls_base64_decode(decoded, maxLength, &outLen, (const unsigned char*)encoded.c_str(), encoded.length());
}

// Encrypt and output JSON
String encryptToJson(const char* plaintext) {
    size_t length = ((strlen(plaintext) + BLOCK_SIZE - 1) / BLOCK_SIZE) * BLOCK_SIZE;
    uint8_t ciphertext[length];
    uint8_t iv[IV_SIZE];
    uint8_t hmac[HMAC_SIZE];

    aesEncrypt((uint8_t*)plaintext, ciphertext, iv, length);
    generateHMAC(ciphertext, length, hmac);

    StaticJsonDocument<256> jsonDoc;
    jsonDoc["data"] = base64Encode(ciphertext, length);
    jsonDoc["hmac"] = base64Encode(hmac, HMAC_SIZE);

    String jsonString;
    serializeJson(jsonDoc, jsonString);
    return jsonString;
}

// Decrypt from JSON and verify HMAC
String decryptFromJson(const String& json) {
    StaticJsonDocument<256> doc;
    deserializeJson(doc, json);

    String encodedData = doc["data"];
    String encodedHMAC = doc["hmac"];

    uint8_t ciphertext[256];
    uint8_t hmac[HMAC_SIZE];

    // Decode the data and hmac from base64
    size_t dataLength = base64Decode(encodedData, ciphertext, sizeof(ciphertext));
    base64Decode(encodedHMAC, hmac, sizeof(hmac));

    uint8_t calculatedHMAC[HMAC_SIZE];
    generateHMAC(ciphertext, dataLength, calculatedHMAC);

    // Verify HMAC
    if (memcmp(hmac, calculatedHMAC, HMAC_SIZE) != 0) {
        return "HMAC verification failed!";
    }

    // Decrypt ciphertext
    uint8_t iv[IV_SIZE];
    aesDecrypt(ciphertext, ciphertext, iv, dataLength);  // Reuse the encrypt function for decryption

    return (char*)ciphertext;
}

